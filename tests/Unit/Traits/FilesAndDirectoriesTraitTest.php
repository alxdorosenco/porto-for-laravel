<?php

namespace AlxDorosenco\PortoForLaravel\Tests\Unit\Traits;

use AlxDorosenco\PortoForLaravel\Tests\TestCase;
use AlxDorosenco\PortoForLaravel\Traits\FilesAndDirectories;
use Illuminate\Contracts\Filesystem\FileNotFoundException;
use Symfony\Component\Finder\Exception\DirectoryNotFoundException;

class FilesAndDirectoriesTraitTest extends TestCase
{
    /**
     * @var __anonymous@412
     */
    private $trait;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->trait = new class {
            use FilesAndDirectories {
                findDirectories as public;
                findExistingDirectory as public;
                findExistingFile as public;
                findFilesInDirectories as public;
                findNamespaceInFile as public;
                findAndChainBetween as public;
                getClassFromFile as public;
                getNamespaceFromPath as public;
                createDirectory as public;
                makeFile as public;
                convertFromJsonToArray as public;
            }
        };
    }

    /**
     * @return void
     */
    public function testFindDirectoriesMethod(): void
    {
        $this->assertIsArray($this->trait->findDirectories('directoryPath', 'needleDirectory'));
    }

    /**
     * @return void
     */
    public function testFindExistingDirectoryMethod(): void
    {
        $existingDirectory = $this->trait->findExistingDirectory(__DIR__);
        $nonExistingDirectory = $this->trait->findExistingDirectory('WrongDirectoryPath');

        $this->assertIsString($existingDirectory);
        $this->assertEquals(__DIR__, $existingDirectory);

        $this->assertNull($nonExistingDirectory);
    }

    /**
     * @return void
     */
    public function testFindExistingFileMethod(): void
    {
        $existingFile = $this->trait->findExistingFile(__FILE__);
        $nonExistingFile = $this->trait->findExistingFile('WrongFilePath');

        $this->assertIsString($existingFile);
        $this->assertEquals(__FILE__, $existingFile);

        $this->assertNull($nonExistingFile);
    }

    /**
     * @return void
     */
    public function testFindFilesInDirectoriesMethod(): void
    {
        $directory = __DIR__;

        $this->assertIsArray($this->trait->findFilesInDirectories($directory));
        $this->assertIsArray($this->trait->findFilesInDirectories([$directory]));

        $this->expectException(DirectoryNotFoundException::class);

        $this->trait->findFilesInDirectories(['WrongDirectoryPath']);
    }

    /**
     * @return void
     */
    public function testFindNamespaceInFileMethod(): void
    {
        $namespace = $this->trait->findNamespaceInFile(__FILE__);

        $this->assertIsString($namespace);
        $this->assertEquals($namespace, __NAMESPACE__);

        $this->expectException(FileNotFoundException::class);

        $this->trait->findNamespaceInFile('WrongFilePath');
    }

    /**
     * @return void
     */
    public function testFindAndChainBetweenMethod(): void
    {
        $this->assertIsArray($this->trait->findAndChainBetween(__FILE__, 'BeforePath', 'AfterPath'));
    }

    /**
     * @return void
     */
    public function testGetClassFromFileMethod(): void
    {
        $class = $this->trait->getClassFromFile(__FILE__);

        $this->assertIsString($class);
        $this->assertEquals($class, __CLASS__);

        $this->expectException(FileNotFoundException::class);

        $this->trait->getClassFromFile('WrongFilePath');
    }

    /**
     * @return void
     */
    public function testGetNamespaceFromPathMethod(): void
    {
        $this->assertIsString($this->trait->getNamespaceFromPath(__CLASS__));
    }

    /**
     * @return void
     */
    public function testCreateDirectoryMethod(): void
    {
        $createdDirectory = $this->trait->createDirectory(__DIR__);

        $this->assertIsString($createdDirectory);
        $this->assertEquals(__DIR__, $createdDirectory);
    }

    /**
     * @return void
     */
    public function testMakeFileMethodWithExistingFile(): void
    {
        $this->assertFalse($this->trait->makeFile(__FILE__, 'Some content'));
    }

    /**
     * @return void
     */
    public function testConvertFromJsonToArray(): void
    {
        $jsonContent = '[{
            "Test": [
                ["string 1", 1, 1.5],
                ["string 2", 2, 2.5],
                ["string 3", 3, 3.5]
            ]
        }]';

        $nonJsonContent = 'Non json content';

        $this->assertIsArray($this->trait->convertFromJsonToArray($jsonContent));

        $this->trait->convertFromJsonToArray($nonJsonContent);
    }
}
