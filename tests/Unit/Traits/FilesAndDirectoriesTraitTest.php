<?php

namespace AlxDorosenco\PortoForLaravel\Tests\Unit\Traits;

use AlxDorosenco\PortoForLaravel\Tests\TestCase;
use AlxDorosenco\PortoForLaravel\Traits\FilesAndDirectories;
use Illuminate\Contracts\Filesystem\FileNotFoundException;

class FilesAndDirectoriesTraitTest extends TestCase
{
    /**
     * @var __anonymous@412
     */
    private $trait;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->trait = new class {
            use FilesAndDirectories {
                findDirectories as public;
                findExistingDirectory as public;
                findExistingFile as public;
                findFilesInDirectories as public;
                findNamespaceInFile as public;
                findAndChainBetween as public;
                getClassFromFile as public;
                getNamespaceFromPath as public;
                createDirectory as public;
                makeFile as public;
                convertFromJsonToArray as public;
            }
        };
    }

    /**
     * @return void
     */
    public function testFindDirectoriesMethod()
    {
        $isArray = is_array($this->trait->findDirectories('directoryPath', 'needleDirectory'));
        $this->assertTrue($isArray);
    }

    /**
     * @return void
     */
    public function testFindExistingDirectoryMethod()
    {
        $existingDirectory = $this->trait->findExistingDirectory(__DIR__);
        $nonExistingDirectory = $this->trait->findExistingDirectory('WrongDirectoryPath');

        $isString = is_string($existingDirectory);
        $this->assertTrue($isString);
        $this->assertEquals(__DIR__, $existingDirectory);

        $this->assertNull($nonExistingDirectory);
    }

    /**
     * @return void
     */
    public function testFindExistingFileMethod()
    {
        $existingFile = $this->trait->findExistingFile(__FILE__);
        $nonExistingFile = $this->trait->findExistingFile('WrongFilePath');

        $isString = is_string($existingFile);
        $this->assertTrue($isString);
        $this->assertEquals(__FILE__, $existingFile);

        $this->assertNull($nonExistingFile);
    }

    /**
     * @return void
     */
    public function testFindFilesInDirectoriesMethod()
    {
        $directory = __DIR__;

        $isArray = is_array($this->trait->findFilesInDirectories($directory));
        $isArraySec = is_array($this->trait->findFilesInDirectories([$directory]));

        $this->assertTrue($isArray);
        $this->assertTrue($isArraySec);

        $this->expectException(\Exception::class);

        $this->trait->findFilesInDirectories(['WrongDirectoryPath']);
    }

    /**
     * @return void
     */
    public function testFindNamespaceInFileMethod()
    {
        $namespace = $this->trait->findNamespaceInFile(__FILE__);

        $isString = is_string($namespace);

        $this->assertTrue($isString);
        $this->assertEquals(__NAMESPACE__, $namespace);

        $this->expectException(FileNotFoundException::class);

        $this->trait->findNamespaceInFile('WrongFilePath');
    }

    /**
     * @return void
     */
    public function testFindAndChainBetweenMethod()
    {
        $isArray = is_array($this->trait->findAndChainBetween(__FILE__, 'BeforePath', 'AfterPath'));
        $this->assertTrue($isArray);
    }

    /**
     * @return void
     */
    public function testGetClassFromFileMethod()
    {
        $class = $this->trait->getClassFromFile(__FILE__);

        $isString = is_string($class);
        $this->assertTrue($isString);
        $this->assertEquals(__CLASS__, $class);

        $this->expectException(FileNotFoundException::class);

        $this->trait->getClassFromFile('WrongFilePath');
    }

    /**
     * @return void
     */
    public function testGetNamespaceFromPathMethod()
    {
        $isString = is_string($this->trait->getNamespaceFromPath(__CLASS__));
        $this->assertTrue($isString);
    }

    /**
     * @return void
     */
    public function testCreateDirectoryMethod()
    {
        $createdDirectory = $this->trait->createDirectory(__DIR__);

        $isString = is_string($createdDirectory);
        $this->assertTrue($isString);
        $this->assertEquals(__DIR__, $createdDirectory);
    }

    /**
     * @return void
     */
    public function testMakeFileMethodWithExistingFile()
    {
        $this->assertFalse($this->trait->makeFile(__FILE__, 'Some content'));
    }

    /**
     * @return void
     */
    public function testConvertFromJsonToArray()
    {
        $jsonContent = '[{
            "Test": [
                ["string 1", 1, 1.5],
                ["string 2", 2, 2.5],
                ["string 3", 3, 3.5]
            ]
        }]';

        $isArray = is_array($this->trait->convertFromJsonToArray($jsonContent));
        $this->assertTrue($isArray);
    }
}
